/*指向常量的指针，不能用于改变其所指对象的值。常量只能用指向常量的指针；而指向常量的指针可以指向非常量*/

/*函数体内定义的变量一般来说并非存放在固定地址当中，因此constexptr指针不能指向这样的变量。相反的，定义于所有函数体之外的对象，其地址固定不变，能用来
初始化constexptr指针。另外允许函数定义一类有效范围超过自身的变量，这类变量也有固定地址，因此可被constexptr绑定。*/

/*constexptr仅对指针有效（若用constexptr声明并定义了一个指针），与指针所指对象无关
    const int *p=nullptr; //底层const
    constexptr int *p = nullptr; //顶层const；
*/

/*typedef char * pstring;
  const pstring cstr=0;  //cstr是指向char的常量指针
  const pstring *ps;  //ps是一个指针 它的对象是指向char的常量指针
  const char *cstr=0;  //cstr是指向const char 的指针
  const 是对给定类型的修饰
  前者 const pstring cstr=0;可意为 const (char *) csptr;
  后者 const char *cstr=0; 可意为 (const char ) * csptr;
*/

/*使用auto声明多个变量时，所有变量的初始基本类型都必须一样*/

/*auto一般会忽略顶层const,但设置一个类型为auto的引用时，初始值中的顶层const仍然保留*/

/***********************deltype类型指示符*************************/
decltype 作用是选择并返回操作数的数据类型。在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值

decltype 处理顶层const时，如果decltype使用的表达式是一个变量，则返回该变量的类型（包括顶层const和引用在内）

decltype处理的表达式内容是解引用操作，则decltype的结果类型与表达式形式密切相关。

decltype所用表达式，如果变量名加上了一对括号的变量名，这样的decltype就会得到引用类型
int i=42;
decltype((i)) d;  //错误：d是int&,必须初始化
decltype(i) e;  //正确：e是一个（未初始化的）int
