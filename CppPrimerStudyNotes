/*指向常量的指针，不能用于改变其所指对象的值。常量只能用指向常量的指针；而指向常量的指针可以指向非常量*/

/*函数体内定义的变量一般来说并非存放在固定地址当中，因此constexptr指针不能指向这样的变量。相反的，定义于所有函数体之外的对象，其地址固定不变，能用来
初始化constexptr指针。另外允许函数定义一类有效范围超过自身的变量，这类变量也有固定地址，因此可被constexptr绑定。*/

/*constexptr仅对指针有效（若用constexptr声明并定义了一个指针），与指针所指对象无关
    const int *p=nullptr; //底层const
    constexptr int *p = nullptr; //顶层const；
*/

/*typedef char * pstring;
  const pstring cstr=0;  //cstr是指向char的常量指针
  const pstring *ps;  //ps是一个指针 它的对象是指向char的常量指针
  const char *cstr=0;  //cstr是指向const char 的指针
  const 是对给定类型的修饰
  前者 const pstring cstr=0;可意为 const (char *) csptr;
  后者 const char *cstr=0; 可意为 (const char ) * csptr;
*/

/*使用auto声明多个变量时，所有变量的初始基本类型都必须一样*/

/*auto一般会忽略顶层const,但设置一个类型为auto的引用时，初始值中的顶层const仍然保留*/

/***********************deltype类型指示符*************************/
decltype 作用是选择并返回操作数的数据类型。在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值

decltype 处理顶层const时，如果decltype使用的表达式是一个变量，则返回该变量的类型（包括顶层const和引用在内）

decltype处理的表达式内容是解引用操作，则decltype的结果类型与表达式形式密切相关。

decltype所用表达式，如果变量名加上了一对括号的变量名，这样的decltype就会得到引用类型
int i=42;
decltype((i)) d;  //错误：d是int&,必须初始化
decltype(i) e;  //正确：e是一个（未初始化的）int

/***************************************Vector*******************************************/
/*如果循环体内部包含有向vector对象添加元素的语句，则不能使用范围for循环

/*但凡是使用了迭代器的循环体，都不要向迭代器所属的容器添加元素

/*不允许用auto关键字由初始值列表来推断类型

/*不存在引用数组和vector

/*如果两个指针分别指向不相关的对象，则不能比较它们

/*对于那些没有指定执行顺序的运算符来说，如果表达式指向并修改了同一个对象，将会引发错误，并产生未定义的行为
int i=0;
cout<<i<<""<<++i<<endl;  //未定义
因为<<运算符没有指定执行顺序，编译器有可能先求i的值再求++i的值，也有可能先求++i的值，再求i的值

有四种运算符明确指定了运算顺序：逻辑与(&&) 逻辑或(||) 条件(?:)  逗号(,)
/*bool类型 非0即真

/*不能通过范围for语句增加Vector对象的元素，因为在范围for语句中，预存了end()的值。

/*******************************************函数**********************************************/
/*return的作用是：终止当前正在执行的函数并将控制权返回到调用该函数的地方

/*不要返回局部对象的引用或者指针

/*重载的时候一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开来

/*一般来说，将函数声明置于局部作用域内不是一个明智的选择。

/*如果我们在内层作用域中声明名字，它将隐藏外层作用域中声明的同名实体。在不同的作用域中无法重载函数名

/*含有多个形参的函数匹配，编译器选择那些形参数量满足要求且实参类型和形参类型能够匹配的函数。然后依次检查每个实参以确定哪个函数是最佳匹配。如果有且只有
一个函数满足下列条件，则匹配成功：
（1）该函数每个实参的匹配都不劣于其他可行函数需要的匹配
（2）至少有一个实参的匹配优于其他可行函数提供的匹配
如果在检查了所有的实参以后没有任何一个函数脱颖而出，则该调用是错误的。编译器将报告二义性错误

/*如果我们想定义一个返回数组指针的函数，则数组的维度必须跟在函数的名字之后。然而，函数的形参列表也跟在函数名字后面
且形参列表应该先于数组的维度

/*类的基本思想是数据抽象和封装。数据抽象是一种依赖于接口和实现分离的编程技术。类的接口包括用户所能执行的操作；
类的实现则包括类的数据成员、负责接口实现的函数体以及定义类所需的各种私有函数。
封装实现了类的接口和实现的分离。封装后的类隐藏了它的实现细节，也就是说，类的用户只能使用接口而无法访问实现部分。

/*std::string isbn() const{return bookNo;}
total.isbn();
当我们调用成员函数时，实际上是替某个对象调用它，如果isbn指向Salas_data的成员(例如bookNo),则它隐式地指向调用该函数对象的成员。在上面所示调用中
当isbn返回bookNo时，实际上它隐式的返回total.bookNo

/*默认情况下，this的类型是指向类类型非常量版本的常量指针。尽管this是隐式的，但它仍然需要遵循初始化规则，意味着我们不能把它绑定到一个常量对象
上。这一情况也就使我们不能在一个常量对象上调用普通的成员函数
this是隐式的并且不会出现在参数列表中，所以在哪儿将this声明成指向常量的指针就成为我们必须面对的问题。c++的做法是允许把const关键字放在成员函数的
参数列表之后，此时，紧跟在参数列表后面的const表示this是一个指向常量的指针。像这样使用const的成员函数被称作常成员函数

/*编译器分两步处理类：首先编译成员的声明，然后才轮到成员函数体

/*类通过一个特殊的构造函数来控制默认初始化过程，这个函数叫做默认构造函数，默认构造函数无需任何实参。

/*编译器创建的构造函数又叫合成的默认构造函数，其将按如下规则初始化类的数据成员：
如果存在类内的初始值，用它来初始化成员
否则，默认初始化该成员

/*一旦我们定义了一些其他的构造函数，那么除非我们再定义一个默认的构造函数，否则类将没有默认构造函数

/*类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或者函数成为他的友元

/*友元的声明只能出现在类定义的内部，但是在类内出现的具体位置不限。友元不是类的成员，也不受他所在区域访问控制级别的约束

/*一个const成员函数如果以引用的形式返回*this，那么它的返回类型将是常量引用

/*类和非成员函数的声明不是必须在它们的友元声明之前。当一个名字第一次出现在一个友元声明中时，我们隐式地假定该名字在当前作用于是可见的。
然而友元本身不一定真的声明在当前作用域当中。
甚至就算是在类的内部定义该函数，我们也必须在类的外部提供相应的声明从而使得函数可见。换句话说，即使我们仅仅是用声明友元的类的成员调用该友元函数，
它也必须是被声明过的：
struct X{
friend void f(){/*友元函数可以定义在类的内部*/}
X(){f();}       //错误f还没有被声明
void g();
void h();
};
void X::g(){return f();}        //错误：f还没有被声明
void f();       //声明f
void X::h(){return f();}        //正确：现在f()的声明已经在作用域当中了


/*一旦遇到了类名，定义的剩余部分就在类的作用域之内了，这里的剩余部分包括参数列表和函数体。

/*编译器处理完类中的全部声明后才会处理成员函数的定义

/*一般来说，内层作用域可以重新定义外层作用域中的名字，即使该名字已经在内层作用域中使用过。然而在类中，如果成员使用了外层作用域中的某个名字，
而该名字代表一种类型，则类不能在之后重新定义该名字。

/*在很多类当中，初始化和赋值的区别事关底层效率问题：前者直接初始化数据成员，后者则先初始化再赋值
除了效率之外更重要的是，一些数据成员必须被初始化

/*成员的初始化顺序与他们在类定义中的出现顺序一致：第一个成员先被初始化，然后第二个，以此类推。构造函数初始值列表中初始值的前后位置关系，不会影响
实际的初始化顺序
class X{
    int i;
    int j;
public:
    X(int val):j(val),i(j){}    //未定义：i在j之前初始化
};

/*当类中定义了其他构造函数的时候，最好也定义一下默认构造函数

/*给所有参数都提供默认值的函数，也是默认构造函数

/*如果构造函数只接受一个实参，则它实际上定义了转换为此类类型的隐式转换机制，有时我们把这种构造函数成为转换构造函数

/*在要求因式转换的程序上下文中，我们可以通过将构造函数声明为explicit加以阻止
关键字explicit只对一个实参的构造函数有效，需要多个实参的构造函数不能用于执行隐式转换，所有无须将这些构造函数指定为explicit的。
只能在类内声明构造函数时使用该关键字，在类外部定义时不应重复

/*explicit构造函数只能用于直接初始化

/*当一个类满足下面所有条件时，我们说它是聚合类：
1、所有的成员都是public的
2、没有定义任何构造函数
3、没有类内初始值
4、没有基类也没有virtual函数

/*数据成员都是字面值类型的聚合类是字面值常量类。如果一个类不是聚合类，但它满足下述要求，则它也是一个字面值常量类
1、数据成员都是字面值类型
2、类必须至少含有一个constexpr构造函数
3、如果一个数据成员含有类内初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，
则初始值必须使用成员自己的constexpr构造函数
4类必须使用析构函数的默认定义，该成员负责销毁类的对象

/*1、类的静态成员：该成员只需与类的本身有关，而不是与类的对象有关，加上static关键字即可声明，其不与任何实例化对象绑定，
但是我们仍然可以使用类作用域运算符访问静态成员。
2、static声明在内部。在外部定义时，不加static.类似与一个全局变量，其初始值必须是常量表达式。
3、静态成员独立于任何对象，其类型可以是它所属的类类型。而非静态成员只能声明为其类的指针或引用

/*静态成员函数和静态成员变量属于类本身，在类加载的时候，即为它们分配了空间，所以可以通过类名：：函数名或者类名：变量名来访问。
而非静态成员函数和非静态成员变量属于对象的方法和数据，也就是说应该先产生类的对象，而后通过类的对象去引用。

/*在静态函数中是不能调用非静态成员的，包括非静态成员函数和非静态成员变量。
原因：静态函数不属于某个具体的对象，也就是说在还没有产生任何一个类的对象之前，这样的函数已经存在于程序的代码区了，但这时，类的非静态成员变量/函数
还没有分配内存空间，因此静态成员函数无法操作非静态成员函数/变量

/**********************************************************IO类***************************************************************/
/*IO对象无拷贝或赋值
进行IO操作通常以引用的方式传递和返回流。读写一个IO对象会改变其状态，因此传递和返回的引用不能是const

/*IO条件状态

/*缓冲区刷新的原因：
1、程序正常结束，作为main函数的return操作的一部分，缓冲刷新被执行
2、缓冲区满时，需要刷新缓冲，而后新的数据才能继续写入缓冲区
3、我们可以使用操纵符如endl来显示刷新缓冲区
4、在每个输出操作之后，我们可以用操纵符unitbuf设置流的内部状态，来清空缓冲区。默认情况下，对cerr是设置unitbuf的，因此写到cerr的内容都是立即刷新的
5、一个输出流可能被关联到另一个流。在这种情况下，当读写被关联的流时，关联到的流的缓冲区会被刷新。例如默认情况下，cin和cerr都被关联到cout。因此，读
cin或写cerr都会导致cout的缓冲区被刷新

/*关联输入和输出流
tie有两个重载版本：一个版本不带参数，返回指向输出流的指针。如果本对象当前关联到一个输出流，则返回这个流的指针，如果对象未关联到流，则返回空指针。
第二个版本接受一个指向ostream的指针，将自己关联到此ostream

/*文件模式
in      以读方式打开
out     以写方式打开
app     每次写操作前均定位到文件末尾
ate     打开文件后立即定位到文件末尾
trunc   截断文件
binary  以二进制方式进行IO

/**********************************************************顺序容器****************************************************************/

/*为了创建一个元素为另一个容器的拷贝，两个容器的类型及其类型必须匹配。不过，当传递迭代器参数来拷贝一个范围时，就不要求容器类型时相同的了。
而且新容器和原来容器中的元素类型也可以不同，只要将要拷贝的元素转换为要初始化的容器的元素类型即可

/*如果元素类型是内置类型或者具有默认构造函数的类类型，可以只为构造函数提供一个容器大小参数，如果元素类型没有默认构造函数，除了大小参数外，还必须指定
一个显式地元素初始值

/*赋值相关运算会导致指向左边容器内部的迭代器、引用和指针失效。而swap操作将容器内容交换不会导致指向容器的迭代器、引用和指针失效。

/*调用swap后，元素本身并未交换，swap只是交换了两个容器的内部数据结构

/*除array外，swap不对任何元素进行拷贝、删除或插入操作，因此可以保证在常数时间内完成

/*元素不会移动的事实意味着，除string外，指向容器的迭代器、引用和指针在swap操作后都不会失效。它们仍然指向swap操作之前所指向的那些元素。
但是在swap操作之后，这些元素已属于不同容器了。

/*与其他容器不同，swap两个array会真正交换它们的元素。因此交换两个array所需要的时间跟array的数目成正比

/*forward_list有自己专有版本的insert和emplace
forward_list 不支持push_back和emplace_back
vector和string不支持push_front和emplace_front

/*当我们用一个对象来初始化容器时，或将一个对象插入到容器中时，实际上放入到容器中的是对象值的一个拷贝，而不是对象本身。就像我们将对象传递给非引用参数
一样，容器中的元素与提供值得对象之间没有任何关联。

/*迭代器表示要拷贝的范围，不能指向与目的位置相同的容器

/*当我们调用一个emplace成员函数的时候，则是将参数传递给元素类型的构造函数

/*每个顺序容器都有一个front函数，除forward_list之外的所有顺序容器都有一个back成员函数。这两个操作分别返回首元素和尾元素的引用

/*forward_list有特殊版本的earse
forward_list不支持pop_back;vector和string不支持pop_front

/*在向容器添加元素后：
1、如果容器时vector或string，且存储空间被重新分配，则指向容器的迭代器、指针和引用都会失效。如果存储空间未重新分配，指向插入位置之前的元素的迭代器、
指针和引用仍然有效，但指向插入位置之元素的迭代器、指针和引用会失效
2、对于deque，插入到除首尾位置之外的任何位置都会导致迭代器、指针和引用失效。如果在首尾位置添加元素，迭代器会失效，但指向存在的元素的引用和指针不会
失效
3、对于list和forward_list，指向容器的迭代器、指针和引用仍然有效

/*list和forward_list的迭代器不支持自加大于等于2以上的操作，若需要执行这样的操作，可以用advance（*iterator,int）：迭代器偏移n

/*标准库实现者采用了可以减少容器空间重新分配次数的策略：不得不获取新的内存空间时，vector和string的实现通常会分配比新的空间需求更大的内存空间。
容器预留这些空间作为备用，可用来保存更多的新元素。这样，就不需要每次添加新元素都重新分配容器的内存空间了

/*只有当需要的内存空间超过当前容量时，reserve调用才会改变vector的容量。如果需求大小大于当前容量，reserve至少分配与需求一样大的内存空间。
如果需求大小小于或等于当前容量，reserve什么也不做。特别是，当需求大小小于当前容量，容器不会退回内存空间。因此在调用reserve之后，capacity将会大于或
等于传递给resize的参数

/*shrink_to_fit请将capcaity()减少为与size()相同大小。但调用shrink_to_fit只是一个请求，标准库并不保证退还内存。

/********************************************************泛型************************************************************************/

/*一般情况下算法并不直接操作容器，而是遍历由两个迭代器指定的一个元素范围来进行操作。

/*谓词是一个可调用的表达式，其返回结果是一个能用作条件的值。

/*尽量保持lambda的变量捕获简单化
如果我们捕获一个指针或者迭代器，或者采用引用捕获方式，就必须确保在lambda执行时，绑定到迭代器、指针或引用的对象仍然存在。而且，需要保证对象具有预期的
值。在lambda从创建到它执行的这段时间里，可能有代码改变绑定的对象的值。

/*默认情况下，对一个值被拷贝的变量lambda不会改变其值，如果我们希望改变一个被捕获的变量的值，就必须在参数列表首加上关键字mutable

/*当我们需要为一个lambda定义返回类型时，必须使用尾置返回类型

/**************************************************参数绑定*************************************************/

/*bind函数：调用bind函数的一般形式是 auto newCallable = bind(callable,arg_list)
其中，newCallable本身是一个可调用对象，arg_list是一个逗号分隔的参数列表，对应给定的callable的参数。即，当我们调用newCallable时会调用Callable，并
传递给它arg_list中的参数
    arg_list中的参数可能包含_n的名字，其中n是一个整数。这些参数是“占位符”，表示newCallable的参数，它们占据了传递给newCallable的参数的“位置”。
数值n表示生成的可调用对象中参数的位置：_1为newCallable的第一个参数,_2为第二个参数，以此类推。
_n定义在一个名为placeholders的命名空间中，而这个命名空间本身定义在std命名空间中，因此为了使用这些名字，两个明明空间都要写上。

/*函数ref返回一个对象，包含给定的引用，此对象是可以拷贝的。标准库中还有一个cref函数，生成一个保存const引用的类。与bind一样，函数ref和cref也定义在
头文件functional中

/*istream_iterator允许使用懒惰求值
当我们将一个istream_iterator绑定到一个流时，标准库并不保证迭代器立即从流中读取数据。具体实现可以推迟从流中读取数据，直到我们使用迭代器时才真正读取。
标准库中的实现所保证的是，在我们第一次解引用迭代器之前，从流中读取数据的操作已经完成了。对于大多数程序来说，立即读取还是推迟读取没什么差别。但是，如果
我们创建了一个istream_iterator，没有使用就销毁了，或者我们正在从两个不同对象同步读取同一个流，那么何时读取可能就很重要了。

/*算法命名规范
1、一些算法使用重载形式传递一个谓词
接受谓词参数来代替<或者==运算符的算法，以及那些不接受额外参数的算法，通常都是重载的函数
2、_if版本的算法
接受一个元素值的算法通常有另外一个不同名的（不是重载）版本，该版本接受一个谓词代替元素值。
3、区分拷贝元素的版本和不拷贝的版本
默认情况下重排元素的算法将重排后的元素写回给定的输入序列中。这些算法还提供另一个版本，将元素写到一个指定的输出目的位置。

/***********************************************************关联容器**************************************************************/

/*有序容器的关键字类型
关联容器对其关键字有一些限制，对于有序容器中的要求，关键字类型必须定义元素比较的方法

/*使用关键字类型的比较函数
用来组织一个容器中元素的操作的类型也是该容器类型的一部分，为了指定使用自定义的操作，必须在定义关联容器时提供此操作的类型。
在尖括号中出现的每个类型，就仅仅是一个类型而已。当我们创建一个容器（对象 ）时，才会以构造函数参数的形式提供真正的比较操作

/*比较类型函数应该是一种函数指针类型

/*如果一个函数要求返回一个pair。在新标准下，我们可以对返回值进行列表初始化
pair<string,int>    process(vector<string> &v){
if(!v.empty())
    return {v.back(),v.back.size()};
    else
    return pair<string,int>();  //隐式返回构造函数
}

/*一个关键字的value_type是一个pair，我们可以改变pair的值，但不能改变关键字成员的值
set迭代器是const的

/*关联容器erase 迭代器版本返回void  key_type版本返回删除的数量 当为0时表示删除的元素不存在

/************************************************动态内存****************************************************************/

/*全局对象在程序启动时分配，在程序结束时销毁。局部自动对象，当我们进入其定义所在程序块时被创建，在离开块时被销毁。
局部static对象在第一次使用前分配，在程序结束时销毁

/*态分配的对象的生存期与它们在哪里创建无关，只有被显示的释放时，这些对象才会被销毁

/*静态内存：保存局部static对象、类static对象、定义在任何函数之外的对象，由编译器自动创建和销毁。
栈内存：保存定义在函数之内的非static对象，栈对象仅在定义的程序块运行时才存在

/*除了静态内存和栈内存，每个程序还拥有一个内存池，这部分内存被称为自由空间或堆，程序用堆来存储动态分配的对象：
在程序运行时分配的对象，其生存周期由程序来控制，也就是说，当动态对象不再使用时，我们必须显式的销毁：必须正确的管理动态内存

/*当指向一个对象的最后一个shared_ptr被销毁时，该对象会被自动销毁：利用析构函数，会递减该对象的引用计数，当引用次数变为0，会销毁该对象

/*使用动态内存的原因：让多个对象共享相同的底层数据。也就是说拷贝的情况虽然发生，但是并不是元素的拷贝，而是将本身的指向拷贝给另一个指针对象，
让这一个对象也指向自己所指向的对象，这样在本身释放以后，还有另一个对象指向自身原来所指向的对象。

/*new和delete相对于智能指针来说非常容易出错，最好使用智能指针来管理动态内存 

/*在自由空间分配的内存是无名的，因此new无法为其分配对象命名，而是返回指向该对象的指针

/*默认情况下，new分配的对象是默认初始化的，这就说明内置类型或者组合类型将是为定义的(l例如：int，会指向一个为初始化的int)，
类类型对象将用默认构造函数进行初始化(例如string，会产生一个空string)。

/*auto只有单一参数时可以使用，可以使用new分配const对象

/*delete完成两个操作：销毁给定指针所指向的对象，释放对应的内存，delete的参数必须是指向动态分配的对象或是一个空指针。

/*内置类型指针管理的动态内存在被显式的释放前一直都会存在，因为内置类型与类类型不同，虽然内置类型的指针会在离开作用域后被销毁，但是其内存依然存在

/*同一块内存释放两次：两个内置类型的指针指向同一块自由空间分配的内存，在对一个指针进行delete之后，其指向的内存也会被释放，
若再对第二个指针进行delete，会造成自由空间破坏

/*很多机器上，即使delete了某个内置类型的指针(也就是说释放了对应的内存空间)，虽然指针已经无效，但是其仍然保留这释放空间的对应地址，
变成了空悬指针，也就是说我们要保留指针，可以将其置为空指针

/*接受指针参数的智能指针构造函数是explicit的。因此，我们不能将一个内置指针隐式的转换为一直智能指针，必须使用直接初始化的形式
shared_ptr<int> p1= new int(1024); //错误：必须使用直接初始化形式
shared_ptr<int> p2(new int (1024)); //正确：使用了直接初始化的形式

/*使用自己的释放操作：shared_ptr<T> p(&t,删除器); */

/*一个unique_ptr拥有它所指向的对象。因此unique_ptr不支持普通的拷贝和赋值操作

/*当我们定义一个unique_ptr时，需要将其绑定到一个new返回的指针上。初始化unique_ptr时必须采用直接初始化

/*release返回的指针通常被用来初始化另一个智能指针或给另一个智能指针赋值，如果我们不用另一个智能指针来保存release返回的指针，我们的程序就要负责资源
的释放

/*不能拷贝uniquqe_ptr的规则有一个例外：我们可以拷贝或赋值一个将要被销毁的unique_ptr 最常见的例子时从函数返回一个Unique_ptr

/*与重载关联容器的比较操作类似，我们必须在尖括号中unique_ptr指向的类型之后提供删除器类型。在创建或者reset一个这种unique_ptr时必须提供一个指定类型
的可调用对象（删除器）
unique_ptr<objT,delT> p(new objT,fcn);

/*weak_ptr是一种不控制所指向对象生存期的只能指针，它指向由一个shared_ptr管理的对象。将一个weak_ptr绑定到一个shared_ptr不会改变shared_ptr的引用
计数。一旦最后一个指向对象的shared_ptr被销毁，对象就会被释放。即使weak_ptr指向对象，对象也还是会被释放。

/*allocator分配未构造的内存

/*为了使用allocate返回的内存，我们必须用construct构造对象。使用未构造的内存，其行为是未定义的。

/*当我们用完对象后，必须对每个构造的元素调用destroy来销毁它们。函数destroy接受一个指针，对指向的对象执行析构函数

/*我们传递给deallocate的大小参数必须与调用allocated分配内存时提供的大小参数具有一样的值

/*****************************************************拷贝控制*********************************************************/

/*如果一个构造函数的第一个参数是自身类类型的引用，且任何额外参数都有默认值，则此构造函数是拷贝构造函数

/*拷贝初始化不仅在我们使用=定义变量时会发生，在下列情况下也会发生：
1、将一个对象作为实参传递给一个非引用类型的形参
2、从一个返回类型为非引用类型的函数返回一个对象
3、用花括号列表初始化一个数组中的元素或一个聚合类中的成员

/*拷贝函数被用来初始化非引用类类型参数，这一特性解释了为什么拷贝构造函数自己的参数必须是引用类型。如果其参数不是引用类型，则调用永远都不会成功
——为了调用拷贝构造函数我们必须拷贝它的实参，但为了拷贝实参，我们又需要调用拷贝构造函数，如此无限循环。

/*什么时候调用析构函数
无论何时一个对象被销毁，就会自动调用其析构函数：
1、变量在离开其作用域时被销毁。
2、当一个对象被销毁时，其成员被销毁
3、容器被销毁时，其元素被销毁
4、对于动态分配的对象，当对指向它的指针应用delete运算符时被销毁
5、对于临时对象，当创建它的完整表达式结束时被销毁

/*******三五法则*********/

/*如果这个类需要一个析构函数，我们几乎可以肯定它也需要一个拷贝构造函数和一个拷贝赋值运算符

/*需要拷贝操作的类也需要赋值操作，反之亦然

/*我们可以通过将拷贝构造函数和拷贝赋值运算符定义为删除的函数来阻止拷贝
NoCopy(const NoCopy&) =delete;  //阻止拷贝
NoCopy &operator=(const NoCopy&) =delete;   //阻止赋值

/*****合成的拷贝控制成员有可能是删除的******/
如果我们未定义拷贝控制成员，编译器会为我们定义合成的版本。类似的，如果一个类未定义构造函数，编译器会为其合成一个默认构造函数。对某些类来说，编译器
将这些合成的成员定义为删除的函数：
1、如果类的某个成员的析构函数是删除的或不可访问的，则类的合成析构函数被定义为删除的。
2、如果类的某个成员的拷贝构造函数是删除的或不可访问的，则类的合成拷贝构造函数被定义为删除的。如果类的某个成员的析构函数时删除的或不可访问的，
则类合成的拷贝构造函数也被定义为删除的
3、如果类的某个成员的拷贝赋值运算符是删除的或不可访问的，或是类有一个const的或引用成员，则类的合成拷贝赋值运算符被定义为删除的
4、如果类的某个成员的析构函数是删除的或不可访问的或是类有一个引用成员，它没有类内初始化器，或是类有一个const成员，它没有类内初始化器且其类型未显式定
义默认构造函数，则该类的默认构造函数被定义为删除的。

本质上，这些规则的含义是：如果一个类有数据成员不能默认构造、拷贝。复制或销毁，则对应的成员函数将被定义为删除的。

/*类可以通过将其拷贝构造函数和拷贝赋值运算符声明为private的来阻止拷贝

/*为了防范自赋值操作，我们应该先将右侧的运算对象拷贝到一个局部临时对象中。当拷贝完成后，销毁左侧运算对象的现有成员就是安全的了。
一旦左侧运算对象的资源被销毁，就只剩下将数据从临时对象拷贝到左侧运算对象的成员中了

/*行为像值：类的行为像一个值，意味着他应该也有自己的状态。当我们拷贝一个像值的对象时，副本和源对象是完全独立的。改变副本不会对原对象有任何影响，
反之亦然

/*行为像指针：行为像指针的类则共享状态：当我们拷贝一个这种类的对象时，副本和原对象使用相同的底层数据。改变副本也会改变源对象，反之亦然。

/*如果存在类型特定的swap版本，其匹配程度会优于std中定义的版本，如果不存在类型特定版本，则会使用std中的版本

/*******************************对象的移动*********************************************/

/*我们不能将左值引用绑定到要求转换的表达式、字面值常量或者是返回右值的表达式，右值引用有完全相反的特性：我们可以将一个左值引用绑定到这类表达式上，
但不能绑定到一个左值上。

/*我们可以销毁一个移后源对象，也可以赋予它新值，但不能使用一个移后源对象的值

/*类似拷贝构造函数，移动构造函数的第一个参数是该类类型的一个引用。不同于拷贝构造函数的是，这个引用参数在移动构造函数中是一个右值引用。与拷贝构造函数
一样，任何额外的参数都必须有默认实参。
除了完成资源的移动，移动构造函数还必须确保移后源对象处于这样一个状态——销毁它是无害的。特别是，一旦资源完成移动，源对象必须不再指向被移动的资源——
这些资源的所有权已经归属新创建的对象。

/*移动构造函数需要noexcept。这是因为两个相互关联的事实：首先，虽然移动操作不抛出异常，但抛出异常也是允许的；其次，标准库容器能对异常发生时其自身的
行为提供保障。例如，vector保证，如果我们调用push_back时发生异常，vector自身不会发生改变。
移动一个对象通常会改变它的值。如果重新分配过程中使用了移动构造函数，且在移动了部分而不是全部元素后抛出了一个异常，就会长生问题。旧元素空间中的移动
源元素已经被改变了，而新空间中未构造的元素可能尚不存在。在此情况下vector将不能满足自身保持不变的要求
因此需要显式标记为noexcept来避免这种问题

/*在移动操作之后，移后源对象必须保持有效的、可析构的状态，但用户不能对其值进行任何假定

/*只有当一个类没有定义任何自己版本的拷贝控制成员，且类的每个非static数据成员都可以移动时，编译器会合成移动构造函数

/***********************************************重载运算与类型转换*************************************************/

/*当一个重载的运算符是成员函数时，this绑定到左侧运算对象。成员运算符函数的（显式）参数数量比运算对象的数量少一个

/*对一个运算符函数来说它或是类的成员，或者至少含有一个类类型的参数

/*输入输出运算符必须是非成员函数

/*为了区分前置和后置运算符，后置版本接受一个额外的（不被使用的）int类型的形参。当我们使用后置运算符时，编译器为这个形参提供一个值为0的实参。尽管从
语法上可以使用这个额外的形参，但在世纪过程中通常不会这么做。这个形参的唯一作用就是区分前置版本和后置版本的函数。而不是真的要在实现后置版本时参与
运算

/****************************************面向对象程序设计*******************************************/

/*通过使用动态绑定，我们能在同一段代码分别处理基类和派生类的对象。函数的运行版本由实参决定，即在运行时选择函数的版本，所以动态绑定有时被称为运行时
绑定

/*基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此

/*virtual只能用于类内部的声明语句之前而不能用于类外部的函数定义。如果基类把一个函数声明为虚函数，则该函数在派生类中隐式地也是虚函数。

/*派生类可以继承定义在基类中的成员，但是派生类的成员函数不一定有权访问基类继承而来的成员。和其他使用基类的代码一样，派生类能访问公有成员，而不能访问
私有成员。不过有时候基类中还有这样一种成员，基类希望它的派生类有权访问该成员，同时禁止其他用户访问。我们有受保护的（protected）访问运算符说明
这样的成员。

/*因为在派生类对象找那个含有与其基类对应的组成部分，所以我们能把派生类的对象当成基类对象来使用，而且我们也能将基类的指针或引用绑定到派生类对象中
基类部分上。
这种转换通常称为派生类到基类的类型转换。和其他类型转换一样，编译器会隐式的执行派生类到基类的转换
这种隐式转换意味着我们可以把派生类对象或者派生类对象的引用用在需要基类引用的地方：同样的，我们也可以吧派生类对象的指针用在需要基类指针的地方。

/*尽管派生类对象中含有从基类继承而来的成员，但是派生类并不能直接初初始化这些成员。和其他创建了基类对象的代码一样，派生类也必须使用基类的构造函数来
初始化它的基类部分。
除非特别指出，否则派生类对象的基类部分会像数据成员一样执行默认初始化。

/*派生类的声明：声明中包含类名但不包含它的派生列表

/*如果我们想将某个类用作基类，则该类必须已经定义而非仅仅声明
class Quote;
class Bulk_quote:public Quote{}     //错误：Quote必须被声明

/*一个类不能派生它本身

/*在类后面跟一个关键字final，以防止继承发生

/*表达式的静态类型在编译时总是已知的，它是变量声明时的类型或表达式生成的类型：动态类型则是变量或表达式表示的内存中的对象的类型。动态类型直到运行
时才可知。
如果表达式既不是引用也不是指针，则它的动态类型永远与静态类型一致。

/*不存在基类向派生类的因时类型转换
因为一个基类的对象可能是派生类对象的一部分，也可能不是，所以不存在从基类向派生类的自动类型转换

/*在对象之间不存在类型转换
派生类向基类的自动类型转换只对指针或引用类型有效，在派生类类型和基类类型之间不存在这样的转换。

/*所有的虚函数都必须被定义

/*我们把具有继承关系的多个类型成为多态类型，因为我们能使用这些类型的“多种形式”而无须在意它们的差距

/*一个派生类的函数如果覆盖了某个继承而来的虚函数，则它的形参类型必须与被它覆盖的基类函数完全一致。
同样，派生类中虚函数的返回类型也必须与基类函数匹配。该规则有一个例外，当类的虚函数返回类型是类本身的指针或引用时，上述规则无效

/*和其他规则一样，虚函数也有默认实参。如果某次函数调用使用了默认实参，则该实参值由本次调用的静态类型决定。

/*在某些情况下我们希望对虚函数的调用不要进行动态绑定，而是强迫其执行虚函数的某个特定版本。使用作用域运算符可以实现这一目的

/*使用回避虚函数的默认机制的情境：当一个派生类的虚函数调用它覆盖的基类的虚函数版本时，在此情况下，基类的版本通常完成继承层次中所有类型都要做的共同
任务，而派生类中定义的版本需要执行一些与派生类本身密切相关的操作。

如果一个派生类虚函数需要调用它的基类版本，但是没有使用作用域运算符，则在运行时该调用将被解析为对派生类版本自身的调用，从而导致无限递归

/*纯虚函数：在函数体的位置书写=0。=0只能出现在类内部的虚函数声明语句处

/*含有（或者未经覆盖直接继承）纯虚函数的类是抽象基类。抽象基类负责定义接口，而后续的其他类可以覆盖该接口。我们不能（直接）创建一个抽象基类的对象

/*派生类构造函数只初始化它的直接基类

/*1、protect和私有成员类似，受保护的成员对于类的用户来说是不可访问的。
2、和公有成员类似，受保护的成员对于派生类的成员和友元来说是可访问的。此外，protected还有另外一条重要的性质
3、派生类的成员或友元只能通过派生类对象来访问基类的受保护成员，派生类对于一个基类对象中的受保护成员没有任何访问特权

/*派生类访问说明符对于派生类的成员（及友元 ）能否访问其直接基类的成员没什么影响。对基类的成员访问权限只与基类中的访问说明符有关。
派生类访问说明符的目的是控制派生类用户（包括派生类的派生类在内）对于基类成员的访问权限

/****************************派生类向基类转换的可访问性**************************/
派生类向基类的转换是否可访问由使用该转换的代码决定，同时派生类的派生访问说明符也会有影响。假定D继承自B：
1、只有当D公有的继承B时，用户代码才能使用派生类向基类的转换；如果D继承B的方式是受保护的或者私有的，则用户代码不能使用该转换
2、不论D以什么方式继承B，D的成员函数和友元都能使用派生类向基类的转换；派生类向其直接基类的类型转换对于派生类的成员和友元来说永远是可访问的
3、如果D继承B的方式是公有的或者受保护的，则D的派生类的成员和友元可以使用D向B的类型转换；反之，如果D继承B的方式是私有的，则不能使用

/***********友元与继承************/

/*就像友元关系不能传递一样，友元关系同样也不能继承。基类的友元在访问派生类成员时不具有特殊性

/*对基类的访问权限由基类本身控制，即使对于派生类的基类部分也是如此

/*通过在类的内部使用using声明语句，我们可以将该类的直接或间接基类中任何可访问成员（例如，非私有成员）标记出来。using声明语句中名字的访问权限由该
using声明语句之前的访问说明符来决定，也就是说，如果一条using声明语句出现在类的public部分，则类的所有用户都能访问它；如果using声明语句位于private
部分，则该名字只能被类的成员和友元访问；如果using声明语句位于protected部分，则该名字对于成员，友元和派生类是可访问的。。

/*class默认是私有继承，struct默认是公有继承

/*一个对象、引用或指针的静态类型，决定了该对象的哪些成员时可见的。即使静态类型与动态类型可能不一致，但是我们能使用哪些成员仍然是由静态类型决定的

/*派生类也能重用定义在其直接基类或者间接基类中的名字，此时定义在内层作用域（即派生类）的名字将隐藏定义在外层作用域的名字

/*可以通过作用域运算符来使用隐藏的成员

名字查找先于类型查找
/*声明在内层作用域的函数并不会重载声明在外层作用域的函数。因此，定义派生类中的函数也不会重载其基类中的成员。和其他作用域一样，如果派生类的成员和基类
的某个成员同名，则派生类将在其作用域内隐藏该基类成员。即使派生类成员和基类成员的形参列表不一致，基类成员也仍然会被隐藏掉

/*当我们delete一个动态分配的对象的指针时将执行析构函数。如果该指针指向继承体系中的某个类型，则有可能出现指针的静态类型与被删除对象的动态类型不符的
情况。编译器必须清楚他应该执行的是哪一个析构函数，因此我们通过在基类中将析构函数定义成虚函数以确保执行正确的析构函数版本。

/*虚析构函数将阻止合成移动操作

/*基类或者派生类的合成拷贝控制成员的行为与其他合成的构造函数、赋值运算符或析构函数类似：它们对类本身的成员一次进行初始化、赋值或销毁操作。此外，这些
合成版本还负责使用直接基类中对应的操作对一个对象的直接基类部分进行初始化、赋值或销毁操作

/*派生类继承基类构造函数的方式是提供了一条注明了（直接）基类名的using声明语句。

/*和普通成员的using声明不一样，一个构造函数的using声明不会改变该构造函数的访问级别。例如不管using声明出现在哪儿，基类的私有构造函数在派生类中还是
一个私有构造函数；受保护的构造函数和公有构造函数也是同样的规则。
而且一个using声明语句不能指定explicit或constexpr

/*当一个基类构造函数含有默认实参时，这些实参并不会被继承。相反，派生类将会获得多个继承的构造函数，其中每个构造函数分别省略掉一个含有默认实参的形参
例如，如果基类有一个接受两个形参的构造函数，其中第二个形参含有默认实参，则派生类将获得两个构造函数：一个构造函数接受两个形参，另一个构造函数只接受
一个形参，它对应于基类中最左侧的没有默认值的那个形参。

/*当我们使用容器存放继承体系中的对象时，通常必须采取间接存储的方式。因为不允许在容器中存放不同类型的元素，所以我们不能把具有继承关系的多种类型的对象
直接存在容器当中

/*面向对象编程（oop）和泛型编程都能处理在编写程序时不知道类型的情况，不同之处是：oop能处理类型在程序运行之前都未知的情况，而在泛型编程中，在编译时
就能获知类型了

/***************************************************************模板与泛型编程**********************************************************/

/*在模板定义中 参数列表不能为空

/*除了定义类型参数，还可以定义非类型参数。一个非类型参数表示一个值而非一个类型。
当一个模板被实例化时，非类型参数被一个用户所提供的或编译器推断出的值所代替。这些值必须是常量表达式，从而允许编译器在编译时实例化模板。
/*编译器会使用字面常量的大小代替非类型参数，若是字符串还会加一（'/0'）

/*函数模板可以声明为inline或constexptr的，如同非模板函数一样。inline或constexpr说明符放在模板参数列表之后，返回类型之前

/*编写泛型代码的两个重要原则
1、函数中函数参数是const的引用
2、函数体中的条件判断仅使用<比较运算

/*模板程序应该尽量减少实参类型的要求

/*通常，当我们调用一个函数时，编译器只需要掌握函数的声明。类似的当我们使用一个类类型对象时，类定义必须是可用的，但成员函数的定义不必已经出现。因此
当我们使用一个类类型的对象时，类定义必须是可用的，但成员函数的定义不必已经出现。因此，我们将类定义和函数声明放在头文件中，而普通函数和类的成员的定义
放在源文件中
模板则不同，为了生成一个实例化版本，编译器需要掌握函数模板或类模板成员函数的定义。因此，与非模板代码不同，模板的头文件通常包括声明也包括定义

/*函数模板可以由编译器推断其参数类型，而类模板不可以

/*一个代码如果使用了另一个函数模板，通常不将一个实际类型（或值）的名字用作其模板实参。相反的，我们通常将模板自己的参数当做被使用模板的实参。

/*当操纵符改变流的格式状态时，通常改变后的状态对所有后续IO都生效
很多程序期望流的状态符合标准库正常的默认设置。在这些情况下，将流的状态置于一个非标准状态可能会导致错误。因此通常最好在不再需要特殊格式时尽快将
流恢复到默认状态

/******************************************************用于大型程序的工具***************************************************************/
/*当执行一个throw时，跟在throw后面的语句将不再执行。相反，程序的控制权从throw转移到与之匹配的catch模块。该catch可能是同一个函数中的局部catch，
也可能位于直接或间接调用了发生异常的函数的另一个函数中。控制权从一处转移到另一处，这有两个很重要的含义：
1、沿着调用链的函数可能会提早退出
2、一旦程序开始执行异常处理代码，则沿着调用链创建的对象将被销毁。
因为跟在throw后面的语句将不再被执行，所以throw语句的用法有点类似于return语句：它通常作为条件语句的一部分或者作为某个函数的最后（或唯一）一条语句

/*一个异常若没有被捕获，则会终止程序

/*异常对象时一个特殊的对象，编译器使用异常抛出表达式来对异常对象进行拷贝初始化。因此throw语句中的表达式必须拥有完全类型。

/*当一个异常被抛出时，沿着调用链的块将依次退出直至找到与异常匹配的处理代码。如果退出了一个块，则同时释放块中局部对象使用的内存，因此抛出一个指向
局部对象的指针几乎肯定是一种错误的行为。

/*抛出指针要求在任何对应的处理代码存在的地方，指针所指的对象都必须存在。

/*throw抛出的表达式是其静态编译的类型，也就是静态类型，所以不会发生动态绑定，若throw表达式解引用一个基类（基类的类型）指针，该指针指向的是派生类对象
，则抛出的对象会被切除其派生类的部分

/*当程序使用具有继承关系的多个异常时，必须对catch语句的顺序进行组织和管理，使得派生类异常的处理代码出现在基类异常的处理代码之前

/*与实参和形参的匹配规则相比，异常和catch异常声明的匹配规则受到更多的限制。此时，绝大多数类型转换都不被允许，除了一些极细小的差别之外，要求异常的
类型和catch声明的类型是精确匹配的：
1、允许从非常量向常量的类型转换，也就是说，一条非常量对象的throw语句可以匹配一个接受常量引用的catch语句
2、允许从派生类向基类的类型转换。
3、数组被转换成指向数组（元素）类型的指针，函数被转换成指向该函数类型的指针
除此之外，包括标准算数类型转换和类类型转换在内，其他所有转换规则都不能在匹配catch的过程中使用

/*如果catch（...）与其他几个catch语句一起出现，则catch（...）必须在最后的位置。出现在捕获所有异常语句后面的catch语句将永远不会被匹配

/*noexcep异常说明可以用来指定某个函数不会抛出异常（C++11新特性），声明和定义时皆需要出现在函数之后，但在final、override、=0之前

/*noexcept用于两种情况：1：确认函数不会抛出异常 2：我们不知道如何处理异常

/*异常说明还可以有实参，为bool类型，为true时，则函数不会抛出异常，为false时会抛出异常

/*noexcept还可以作为运算符来使用，当其不跟在函数参数列表之后时，返回值是一个bool的常量表达式，为true时，表明传入参数会抛出异常

/*1、函数指针和该指针所指的函数必须具有一致的异常说明
2、如果一个虚函数承诺不抛出异常，则其派生类的相应虚函数需要作出同样的承诺
3、若对所有成员和基类的操作都是noexcept的，则编译器合成版本的成员也是noexcept的

/*对于命名空间中名字的隐藏规则来说有一个重要例外，它使我们可以直接访问输出运算符。这个例外是，当我给函数传递一个类类型对象时，除了在常规作用域内查找
外还会查找实参类所属的命名空间。这一例外对于传递类的引用和类的指针同样有效

/*using声明语句声明的是一个名字，而非一个特定的函数。当我们为函数书写using声明时，该函数的所有版本都被引入当前作用域

/*如果命名空间的某个函数与该命名空间所属作用域的函数同名，则命名空间的函数将被添加到重载集合中
与using声明不同的是，对于using指示来说，引入一个与已有函数形参列表完全相同的函数并不会产生错误。此时，只要我们指明调用的是命名空间的函数版本还是
当前作用域的版本即可

/*如果存在多个using指示，则来自每个命名空间的名字都会成为候选函数集的一部分

/*在c++11标准中，允许派生类从它的一个或几个基类中继承构造函数。但是如果从多个基类中继承了相同的构造函数（即形参列表完全相同），则程序将会产生错误

/*与只有一个基类的继承一样，多重继承的派生类如果定义了自己的拷贝/赋值构造函数和赋值运算符，则必须在完整的对象上执行拷贝、移动或赋值操作。
只有当派生类使用的是合成版本的拷贝、移动或赋值成员时，才会自动对其基类部分执行这些操作。在合成的拷贝控制成员中，每个基类分别使用自己的对应成员
隐式的完成构造、赋值或销毁等工作

/*编译器不会在派生类向基类的几种转换中进行比较和选择，因为在它看来转换到任意一种基类都一样好

/*在多重继承的情况下，相同的查找过程在所有直接基类中同时进行。如果名字在多个基类中都被找到，则对该名字的使用具有二义性
对于一个派生类来说，从他的几个基类中分别继承名字相同的成员时完全合法的，只不过在使用这个名字时必须明确指出它的版本

/*尽管在派生列表中同一个基类只能出现一次，但实际上派生类可以多次继承同一个类。派生类可以通过它的两个直接基类分别继承同一个间接基类，也可以直接继承
某个基类，然后通过另一个基类再一次间接继承该类。

/*在c++语言中我们通过虚继承的机制解决上述问题。虚继承的目的是令某个类做出声明，承诺愿意共享它的基类。其中，共享的基类子对象称为虚基类。在这种机制下，
不论虚基类在继承体系中出现多少次，在派生类中都只包含唯一一个共享的虚基类子对象。

/*虚派生只影响从指定了虚基类的派生类中进一步派生出的类，它不会影响派生类本身

/*在虚派生中，虚基类是由最底层的派生类初始化的。（如果按照普通规则，则虚基类将会在多条继承路径上被重复初始化）

/*一个类可以由多个虚基类。此时，这些虚的子对象按照它们在派生列表中出现的顺序从左到右依次访问

/*标准库函数operator new和operator delete的名字容易让人误解。和其他operator函数不同，这两个函数并没有重载new表达式和delete表达式。实际上，我们
根本无法自定义new表达式或delete表达式的行为

/*operator new分配的内存空间我们无法用construct函数构造对象。相反，我们应该使用new的定位new形式构造对象。如我们所知，new的这种形式为分配函数提供
了额外的信息。我们可以使用定位new传递一个地址，此时定位new的形式如下所示

/*operator（size_t,void *）函数使我们无法自定义的版本

/*尽管很多时候使用定位new和allocator的construct成员非常相似，但在它们之间也有一个重要区别。我们传给construct的指针必须指向同一个allocator对象
分配的空间，但是传给定位new的指针无须指向operator new分配的内存。实际上传给定位new表达式的指针真是不需要指向动态内存

/*运行时类型识别：由两个运算符实现
1、typeid运算符，用于返回表达式的类型。
2、dynamic_cast运算符，用于将基类的指针或引用安全的转换成派生类的指针或引用安全地转换成派生类的指针或引用
当我们将这两个运算符用于某种类型的指针或引用，并且该类型含有虚函数时，运算符将使用指针或引用所绑定对象的动态类型

/*dynamic_cast 运算符的使用形式
1、dynamic_cast<type*>(e)
2、dynamic_cast<type&>(e)
3、dynamic_cast<type&&>(e)
其中type必须是一个类类型，并且通常情况下该类型应该含有虚函数。在第一种形式中，e必须是一个有效的指针；在第二种形式中，e必须是一个左值；在第三种形式
中e不能是左值
在上面的所有形式中，e的类型必须符合以下三个条件中任意一个：e的类型是目标type的公有派生类、e的类型是目标type的公有基类或者e的类型就是目标type类型

/*typeid运算符可以作用于任意类型的表达式。顶层const会被忽略，如果表达式是一个引用，则typeid返回该引用所引对象的类型。不过当typeid作用于数组或函数
时，并不会执行向指针的标准类型转换。

/*当运算对象不属于类类型或者是一个不包含任何虚函数的类时，typeid运算符指示的是运算对象的静态类型，而当运算对象是定义了至少一个虚函数的类的左值时，
typeid的结果直到运行时才会求得。

/*枚举类型：
枚举类型输入字面值常量类型

/*限定作用域的枚举类型:关键字enum class随后是枚举类型名字以及用花括号括起来的以逗号分隔的枚举成员列表，最后是一个分号

不限定作用域的枚举类型：省略关键字class或struct，枚举类型的名字是可选的

/*在限定作用域的枚举类型中，枚举成员的名字遵循常规的作用域准则，并且在枚举类型的作用域外是不可访问的。与之相反，在不限定作用域的枚举类型中，枚举成员
的作用域与枚举类型本身的作用域相同；

/*枚举类型是const，因此在初始化枚举成员时提供的初始值必须是常量表达式。也就是说，每个枚举成员本身就是一条常量表达式，我们可以在任何需要常量表达式
的地方使用枚举成员

/*一个不限定作用域的枚举类型对象或枚举成员自动地转换成整型

/*要想初始化一个enum对象，必须使用该enum类型的另一个对象或者他的一个枚举成员。因此，即使某个整数值恰好与枚举成员的值相等，它也不能作为函数的enum
实参使用
    尽管不能直接将整型值传给enum形参，但是可以讲一个不限定作用域的枚举类型的对象或枚举类型的成员传给整型形参。此时enum的值提升为int或更大的整型，
实际提升的结果由枚举类型的潜在类型决定

/*嵌套类是定义在另一个类中的类。它是一个独立的类，与外层类基本没有什么关系。特别是，外层类的对象和嵌套类的对象时相互独立的。在嵌套类的对象中不
包含任何外层类定义的成员，类似的，在外层类的对象中也不包含任何嵌套类定义的成员

嵌套类可以直接使用外层类的成员，无须对该成员的名字进行限定。

/*union：一种节省空间的类
union是一种特殊的类。一个union可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。当我们给union的某个成员赋值之后，该union的其他成员就变成
未定义的状态了。分配给一个union对象的存储空间至少要能容纳它的最大的数据成员。和其他类一样，一个union定义了一种新类型

/*union中不能含有虚函数

/*一旦我们定义一个匿名union，编译器就自动地为该union创建一个未命名对象，我们可以直接访问它的成员

/*类定义于某个函数的内部，我们称这样的类为局部类。局部类定义的类型只在它的作用域内可见

/*局部类只能访问外层作用域定义的类型名，静态变量以及枚举成员。如果局部类定义在某个函数内部，则该函数的局部变量不能被该局部类使用
