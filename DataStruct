/*幂函数2^n算法
inline int sqr(int a){return a*a;}
int power2(int n){
    if(n==0) return 0;
    else
        return (n&1)?sqr(power2(n>>1))<<1:sqr(power2(n>>1));
    }

/*相较于同一算法的迭代版，递归版往往需耗费更多空间，并进而影响实际的运行速度。另外，就操作系统而言，为实现递归调用需要花费大量额外的时间以创建、维护和
销毁各递归实例，这些也会令计算的负担雪上加霜。在对运行速度要求极高、存储空间需精打细算的场合，往往将递归算法改写成等价的非递归版本。

/*系统在后台隐式维护调用栈的过程中，难以区分哪些变量和参数是对计算过程有实质作用的，更无法通过以通用的方式对其进行优化，因此不得不将描述调用现场的所有变
量和参数悉数入栈。再加上每一帧必须保存和执行的返回地址以及上一帧的初始位置，往往导致程序的空间效率不高甚至极低；同时，隐式的入栈和出栈时间也会令实际运行
时间增加很多。 因此在追求更高效率的场合，应当尽可能避免递归，尤其是过度递归。

