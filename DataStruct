/*幂函数2^n算法
inline int sqr(int a){return a*a;}
int power2(int n){
    if(n==0) return 0;
    else
        return (n&1)?sqr(power2(n>>1))<<1:sqr(power2(n>>1));
    }

/*相较于同一算法的迭代版，递归版往往需耗费更多空间，并进而影响实际的运行速度。另外，就操作系统而言，为实现递归调用需要花费大量额外的时间以创建、维护和
销毁各递归实例，这些也会令计算的负担雪上加霜。在对运行速度要求极高、存储空间需精打细算的场合，往往将递归算法改写成等价的非递归版本。

/*
