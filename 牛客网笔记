/*在所有类说明中内部定义的成员都是内联函数
使用内联函数的地方会在 编译 阶段用内联函数体替换掉

/*负数以补码存储，形式为源码按位取反后加1；正数的补码是自己

/*int fseek(FILE *stream,long offset,int fromwhere) 函数设置文件指针stream的位置
如果执行成功，stream将指向以fromwhere为基准，偏移offset个字节的位置，函数返回0.如果执行失败，则不改变stream指向的位置，函数返回一个值

/*在一个16位机器，以下结构由于边界对齐浪费了多少空间
struct{
  char a;
  int b;
  char c;
}
结构体中字节对齐有两条规则：
1、数据成员自对齐，即数据成员起始地址为数据类型长度的整数倍，如该题int型b只能从0,2,4....等地址开始放
2、结构体总长度是结构体中有效对齐值的正数倍，有效对齐值，如没明确指出，则为最长数据成员的长度整数倍
根据规则1，int b从2处开始放，此时结构体的长度为1+1+2+1=5；再根据规则2，结构体总长度应为2的正数倍故应为6，因此有两个字节被浪费
